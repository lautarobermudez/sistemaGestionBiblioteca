// ========================================
// SISTEMA INTERACTIVO DE GESTI√ìN DE BIBLIOTECA
// ========================================

const readline = require('readline');

// Configuraci√≥n de readline para entrada de usuario
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

// Variables globales para almacenar datos
let prestamosActivos = []; // Libros actualmente prestados
let historialDevoluciones = [];
let multasDelDia = 0;
let contadorOperaciones = 0;

// ========================================
// FUNCIONES DEL SISTEMA
// ========================================

// 1. FUNCI√ìN PARA REGISTRAR PR√âSTAMOS (Funci√≥n tradicional)
function registrarPrestamo(titulo, nombreUsuario, diasPrestamo = 7) {
    // ENTRADA: datos del pr√©stamo
    const fechaActual = new Date();
    const fechaLimite = new Date();
    fechaLimite.setDate(fechaActual.getDate() + diasPrestamo);
    
    // PROCESAMIENTO: crear objeto pr√©stamo
    const prestamo = {
        id: ++contadorOperaciones,
        titulo: titulo.trim(),
        usuario: nombreUsuario.trim(),
        fechaPrestamo: fechaActual.toLocaleDateString('es-AR'),
        fechaLimite: fechaLimite.toLocaleDateString('es-AR'),
        diasPermitidos: diasPrestamo
    };
    
    prestamosActivos.push(prestamo);
    
    // SALIDA: confirmaci√≥n
    console.log(`\n‚úÖ PR√âSTAMO REGISTRADO EXITOSAMENTE`);
    console.log(`üìö Libro: "${titulo}"`);
    console.log(`üë§ Usuario: ${nombreUsuario}`);
    console.log(`üìÖ Fecha l√≠mite: ${prestamo.fechaLimite}`);
    console.log(`üî¢ ID de pr√©stamo: ${prestamo.id}\n`);
    
    return prestamo;
}

// 2. FUNCI√ìN PARA PROCESAR DEVOLUCIONES (Arrow function)
const procesarDevolucion = (titulo, nombreUsuario) => {
    // ENTRADA: buscar el pr√©stamo activo
    const prestamoIndex = prestamosActivos.findIndex(p => 
        p.titulo.toLowerCase() === titulo.toLowerCase() && 
        p.usuario.toLowerCase() === nombreUsuario.toLowerCase()
    );
    
    if (prestamoIndex === -1) {
        console.log(`\n‚ùå ERROR: No se encontr√≥ un pr√©stamo activo de "${titulo}" para ${nombreUsuario}\n`);
        return null;
    }
    
    const prestamo = prestamosActivos[prestamoIndex];
    
    // PROCESAMIENTO: calcular d√≠as de retraso
    const fechaActual = new Date();
    const fechaLimite = new Date(prestamo.fechaLimite.split('/').reverse().join('-'));
    const diferenciaDias = Math.ceil((fechaActual - fechaLimite) / (1000 * 60 * 60 * 24));
    const diasRetraso = diferenciaDias > 0 ? diferenciaDias : 0;
    
    const multaPorDia = 0.50;
    const multa = diasRetraso * multaPorDia;
    
    // Crear registro de devoluci√≥n
    const devolucion = {
        ...prestamo,
        fechaDevolucion: fechaActual.toLocaleDateString('es-AR'),
        diasRetraso: diasRetraso,
        multa: multa,
        estado: diasRetraso > 0 ? 'CON RETRASO' : 'A TIEMPO'
    };
    
    // Actualizar datos globales
    historialDevoluciones.push(devolucion);
    multasDelDia += multa;
    prestamosActivos.splice(prestamoIndex, 1); // Eliminar de pr√©stamos activos
    
    // SALIDA: mostrar resultado
    console.log(`\n‚úÖ DEVOLUCI√ìN PROCESADA`);
    console.log(`üìö Libro: "${titulo}"`);
    console.log(`üë§ Usuario: ${nombreUsuario}`);
    console.log(`üìÖ Devuelto el: ${devolucion.fechaDevolucion}`);
    
    if (diasRetraso > 0) {
        console.log(`‚è∞ D√≠as de retraso: ${diasRetraso}`);
        console.log(`üí∞ Multa aplicada: $${multa.toFixed(2)}`);
    } else {
        console.log(`üéâ ¬°Devuelto a tiempo! Sin multa.`);
    }
    console.log('');
    
    return devolucion;
};

// 3. FUNCI√ìN PARA MOSTRAR ESTAD√çSTICAS (Funci√≥n an√≥nima)
const mostrarEstadisticas = function() {
    // ENTRADA: datos almacenados
    const totalPrestamosActivos = prestamosActivos.length;
    const totalDevoluciones = historialDevoluciones.length;
    const devolucionesATiempo = historialDevoluciones.filter(d => d.diasRetraso === 0).length;
    const devolucionesConRetraso = historialDevoluciones.filter(d => d.diasRetraso > 0).length;
    
    // PROCESAMIENTO: calcular m√©tricas
    const promedioRetraso = totalDevoluciones > 0 
        ? (historialDevoluciones.reduce((sum, d) => sum + d.diasRetraso, 0) / totalDevoluciones).toFixed(1)
        : 0;
    
    // SALIDA: reporte completo
    console.log(`\nüìä ========== ESTAD√çSTICAS DEL D√çA ==========`);
    console.log(`üìö Pr√©stamos activos: ${totalPrestamosActivos}`);
    console.log(`üîÑ Devoluciones procesadas: ${totalDevoluciones}`);
    console.log(`‚úÖ Devoluciones a tiempo: ${devolucionesATiempo}`);
    console.log(`‚è∞ Devoluciones con retraso: ${devolucionesConRetraso}`);
    console.log(`üí∞ Total multas recaudadas: $${multasDelDia.toFixed(2)}`);
    console.log(`üìà Promedio d√≠as de retraso: ${promedioRetraso}`);
    
    if (totalPrestamosActivos > 0) {
        console.log(`\nüìã PR√âSTAMOS ACTIVOS:`);
        prestamosActivos.forEach(p => {
            console.log(`  ‚Ä¢ "${p.titulo}" - ${p.usuario} (vence: ${p.fechaLimite})`);
        });
    }
    console.log(`=============================================\n`);
    
    return {
        prestamosActivos: totalPrestamosActivos,
        devoluciones: totalDevoluciones,
        multasTotal: multasDelDia,
        promedioRetraso: parseFloat(promedioRetraso)
    };
};

// ========================================
// FUNCIONES DE INTERFAZ INTERACTIVA
// ========================================

// Funci√≥n para mostrar el men√∫ principal
function mostrarMenu() {
    console.log(`
üèõÔ∏è  SISTEMA DE BIBLIOTECA - MEN√ö PRINCIPAL
==========================================
1. üìö Registrar nuevo pr√©stamo
2. üîÑ Procesar devoluci√≥n
3. üìä Ver estad√≠sticas del d√≠a
4. üìã Ver pr√©stamos activos
5. üö™ Salir del sistema
==========================================`);
}

// Funci√≥n para validar entrada no vac√≠a
function validarEntrada(input, campo) {
    if (!input || input.trim() === '') {
        console.log(`‚ùå Error: ${campo} no puede estar vac√≠o.`);
        return false;
    }
    return true;
}

// Funci√≥n para procesar opci√≥n de registrar pr√©stamo
function procesarRegistroPrestamo() {
    rl.question('üìö Ingrese el t√≠tulo del libro: ', (titulo) => {
        if (!validarEntrada(titulo, 'El t√≠tulo')) {
            volverAlMenu();
            return;
        }
        
        rl.question('üë§ Ingrese el nombre del usuario: ', (usuario) => {
            if (!validarEntrada(usuario, 'El nombre del usuario')) {
                volverAlMenu();
                return;
            }
            
            rl.question('üìÖ D√≠as de pr√©stamo (por defecto 7): ', (dias) => {
                const diasPrestamo = dias.trim() === '' ? 7 : parseInt(dias);
                
                if (isNaN(diasPrestamo) || diasPrestamo <= 0) {
                    console.log('‚ùå Error: Los d√≠as deben ser un n√∫mero positivo.');
                    volverAlMenu();
                    return;
                }
                
                registrarPrestamo(titulo, usuario, diasPrestamo);
                volverAlMenu();
            });
        });
    });
}

// Funci√≥n para procesar opci√≥n de devoluci√≥n
function procesarDevolucionInteractiva() {
    if (prestamosActivos.length === 0) {
        console.log('\nüìã No hay pr√©stamos activos para devolver.\n');
        volverAlMenu();
        return;
    }
    
    rl.question('üìö Ingrese el t√≠tulo del libro a devolver: ', (titulo) => {
        if (!validarEntrada(titulo, 'El t√≠tulo')) {
            volverAlMenu();
            return;
        }
        
        rl.question('üë§ Ingrese el nombre del usuario: ', (usuario) => {
            if (!validarEntrada(usuario, 'El nombre del usuario')) {
                volverAlMenu();
                return;
            }
            
            procesarDevolucion(titulo, usuario);
            volverAlMenu();
        });
    });
}

// Funci√≥n para mostrar pr√©stamos activos
function mostrarPrestamosActivos() {
    console.log(`\nüìã PR√âSTAMOS ACTIVOS`);
    console.log(`====================`);
    
    if (prestamosActivos.length === 0) {
        console.log('No hay pr√©stamos activos en este momento.\n');
    } else {
        prestamosActivos.forEach((prestamo, index) => {
            console.log(`${index + 1}. "${prestamo.titulo}"`);
            console.log(`   Usuario: ${prestamo.usuario}`);
            console.log(`   Fecha l√≠mite: ${prestamo.fechaLimite}`);
            console.log(`   ID: ${prestamo.id}\n`);
        });
    }
}

// Funci√≥n para volver al men√∫ principal
function volverAlMenu() {
    rl.question('Presione Enter para continuar...', () => {
        iniciarSistema();
    });
}

// Funci√≥n principal del sistema
function iniciarSistema() {
    mostrarMenu();
    rl.question('Seleccione una opci√≥n (1-5): ', (opcion) => {
        switch(opcion.trim()) {
            case '1':
                procesarRegistroPrestamo();
                break;
            case '2':
                procesarDevolucionInteractiva();
                break;
            case '3':
                mostrarEstadisticas();
                volverAlMenu();
                break;
            case '4':
                mostrarPrestamosActivos();
                volverAlMenu();
                break;
            case '5':
                console.log('\nüëã ¬°Gracias por usar el Sistema de Biblioteca!');
                console.log('¬°Hasta pronto!\n');
                rl.close();
                break;
            default:
                console.log('\n‚ùå Opci√≥n no v√°lida. Por favor, seleccione del 1 al 5.\n');
                iniciarSistema();
                break;
        }
    });
}

// ========================================
// INICIO DEL SISTEMA
// ========================================

console.log('üéâ ¬°Bienvenido al Sistema de Gesti√≥n de Biblioteca!\n');
iniciarSistema();
